#!/usr/bin/env python3

import sys
import os
import logging
import urllib
from optparse import OptionParser

from cinp import client
from cinp.client import NotAuthorized

oparser = OptionParser( description='CInP Auto Documentation', usage='usage %prog [options] <CInP endpoint, ie: http://service/api/v1/ >' )

oparser.add_option( '-p', '--proxy', help='HTTP Proxy', dest='proxy', default=None )
oparser.add_option( '-f', '--file', help='Target File, - for stdout (default: -)', dest='file', metavar='FILENAME', default='-' )
oparser.add_option( '-d', '--description', help='API Description (used for the document title)', dest='description', default='' )
oparser.add_option( '-v', '--verbose', dest='verbose', default=False, action='store_true' )

( options, args ) = oparser.parse_args()

if len( args ) != 1:
  oparser.error( 'CInP Enpoint required' )

logging.basicConfig()
logger = logging.getLogger()

if options.verbose:
  logger.setLevel( logging.DEBUG )
else:
  logger.setLevel( logging.INFO )


def _table( header_list, data_list ):
  col_count = len( header_list )
  col_width_list = [ len( i ) for i in header_list ]
  if data_list:
    for x in range( 0, col_count ):
      col_width_list[x] = max( col_width_list[x], *[ len( i[x] ) for i in data_list ] )

  result = ''

  result += '+-' + '-+-'.join( [ '-' * i for i in col_width_list ] ) + '-+\n'
  result += '| ' + ' | '.join(
             [ header_list[i] +
               ( ' ' * ( col_width_list[i] - len( header_list[i] ) ) )
               for i in range( 0, col_count ) ] ) + ' |\n'
  result += '+=' + '=+='.join( [ '=' * i for i in col_width_list ] ) + '=+\n'
  if data_list:
    for data in data_list:
      result += '| ' + ' | '.join(
                 [ data[i] +
                   ( ' ' * ( col_width_list[i] - len( data[i] ) ) )
                   for i in range( 0, col_count ) ] ) + ' |\n'
      result += '+-' + '-+-'.join( [ '-' * i for i in col_width_list ] ) + '-+\n'
      
  else:
    result += '+-' + '-+-'.join( [ '-' * i for i in col_width_list ] ) + '-+\n'

  return result + '\n'


def parm_table( parm_list ):
  item_list = []
  if isinstance( parm_list, list ):
    for parm in parm_list:
      type = parm[ 'type' ]

      try:
        type += ' ({0})'.format( parm[ 'uri' ] )
      except KeyError:
        pass

      try:
        type += ' ({0})'.format( parm[ 'allowed_schemes' ] )
      except KeyError:
        pass

      item_list.append( (
                          parm[ 'name' ],
                          type,
                          str( parm.get( 'length', '' ) ),
                          str( parm.get( 'default', '' ) ),
                          str( parm.get( 'choices', '' ) ),
                          '*' if parm.get( 'is_array', False ) else ' ',
                          parm.get( 'doc', '' )
                         ) )

    return _table( [ 'Name', 'Type', 'Length', 'Default', 'Choices', 'Array', 'Doc' ], item_list )
  else:
    parm = parm_list
    type = parm[ 'type' ]

    if type is None:
      return ''

    try:
      type += ' ({0})'.format( parm[ 'uri' ] )
    except KeyError:
      pass

    item_list.append( (
                        type,
                        str( parm.get( 'length', '' ) ),
                        '*' if parm.get( 'is_array', False ) else ' ',
                        parm.get( 'doc', '' )
                      ) )
    return _table( [ 'Type', 'Length', 'Array', 'Doc' ], item_list )


def field_table( field_list ):
  item_list = []
  for field in field_list:
    type = field[ 'type' ]

    try:
      type += ' ({0})'.format( field[ 'uri' ] )
    except KeyError:
      pass

    item_list.append( (
                        field[ 'name' ],
                        type,
                        str( field.get( 'length', '' ) ),
                        str( field.get( 'default', '' ) ),
                        str( field.get( 'choices', '' ) ),
                        '*' if field.get( 'is_array', False ) else ' ',
                        field[ 'mode' ],
                        '*' if field[ 'required' ] else ' ',
                        field.get( 'doc', '' )
                      ) )

  return _table( [ 'Name', 'Type', 'Length', 'Default', 'Choices', 'Array', 'Mode', 'Req', 'Doc' ], item_list )


def do_namespace( url, path ):
  try:
    item = cinp.describe( url )
  except NotAuthorized:
    logging.warning( 'describing namespace "{0}" is not Authorized'.format( url ) )
    return

  if 'namespaces' not in item:
    print( 'expected namespace got "{0}"'.format( item ) )

  if item[ 'name' ] is None:  # quite often the root name space does not have a name
    item[ 'name' ] = '(root)'

  name = '.'.join( path + [ item[ 'name' ] ] )

  doc = item.get( 'doc', '' ).strip().replace( '\n', '\n  ' )
  if len( doc ) > 0:
    doc = """
::

  {0}

""".format( doc )

  output.write( """
Namespace - {1}
============{0}
URL: {2}

API Version: {3}

{4}

""".format(
        '=' * len( name ),
        name,
        url,
        item[ 'api-version' ],
        doc
       ) )

  path = path + [ item[ 'name' ] ]

  item[ 'models' ].sort()
  for model in item[ 'models' ]:
    do_model( model )

  item[ 'namespaces' ].sort()
  for child in item[ 'namespaces' ]:
    do_namespace( child, path )


def do_model( url ):
  try:
    item = cinp.describe( url )
  except NotAuthorized:
    logging.warning( 'describing model "{0}" is not Authorized'.format( url ) )
    return

  if 'fields' not in item:
    print( 'expected model got "{0}"'.format( item ) )

  doc = item.get( 'doc', '' ).strip().replace( '\n', '\n  ' )
  if len( doc ) > 0:
    doc = """
::

  {0}

""".format( doc )

  constants = []
  for tmp in item[ 'constants' ]:
    constants.append( tmp )

  if constants:
    constants = """Constants
~~~~~~~~~

::

  - {0}
""".format( '\n  - '.join( constants ) )

  else:
    constants = ''

  list_filters = []
  if item[ 'list-filters' ]:
    list_filters = """List Filters
~~~~~~~~~~~~

"""
    for name, paramater_list in item[ 'list-filters' ].items():
      list_filters += '{0}\n{1}\n'.format( name, '^' * len( name ) )
      list_filters += parm_table( paramater_list )

  else:
    list_filters = ''

  if item[ 'fields' ]:
    fields = """Fields
~~~~~~

""" + field_table( item[ 'fields' ] )
  else:
    fields = ''

  output.write( """
Model - {0}
--------{1}

URL: {2}

{3}
{4}
{5}
{6}

""".format(
        item[ 'name' ],
        '-' * len( item[ 'name' ] ),
        url,
        doc,
        constants,
        list_filters,
        fields,
       ) )

  for action in item[ 'actions' ]:
    do_action( action )


def do_action( url ):
  try:
    item = cinp.describe( url )
  except NotAuthorized:
    logging.warning( 'describing action "{0}" is not Authorized'.format( url ) )
    return

  if 'paramaters' not in item:
    print( 'expected action got "{0}"'.format( item ) )

  doc = item.get( 'doc', '' ).strip().replace( '\n', '\n  ' )
  if len( doc ) > 0:
    doc = """
::

  {0}

""".format( doc )

  if item.get( 'return-type', False ):
    return_type = parm_table( item[ 'return-type' ] )
    if return_type:
      return_type = 'Return Type:\n\n' + return_type

  else:
    return_type = ''

  if item.get( 'paramaters', False ):
    paramaters = 'Paramaters:\n\n' + parm_table( item[ 'paramaters' ] )
  else:
    paramaters = ''

  output.write( """
Action - {0}
~~~~~~~~~{1}

URL: {2}

Static: {3}

{4}

{5}

{6}

""".format(
        item[ 'name' ],
        '~' * len( item[ 'name' ] ),
        url,
        item[ 'static' ],
        doc,
        return_type,
        paramaters,
       ) )


if options.file == '-':
  output = sys.stdout
else:
  output = open( options.file, 'w' )

try:
  url = urllib.parse.urlparse( args[0] )
except ValueError:
  print( 'Error parsing "{0}"'.format( args[0] ) )

try:
  cinp = client.CInP( '{0}://{1}:{2}'.format( url.scheme, url.hostname, url.port if url.port is not None else 80 ), url.path, options.proxy )

  title = 'CInP API Documentation for {0}'.format( options.description )

  output.write( '{0}\n{1}\n{2}\n'.format( '=' * len( title ), title, '=' * len( title ) ) )

  do_namespace( url.path, [] )

  output.write( '\nGenerated by CInP autodoc\n-------------------------\n' )

except Exception as e:
  output.close()
  print( 'Error "{0}", aborting.'.format( e ) )
  if options.file:
    os.unlink( options.file )

  raise e
  sys.exit( 1 )

sys.exit( 0 )
