import os
from jinja2 import Environment

all_upper = ( 'ip', 'id', 'uuid', 'ttl', 'url', 'http', 'https' )


def goName( word ):
  return ''.join( x.upper() if x in all_upper else x.capitalize() for x in word.split( '_' ) )


include_list = []
prefix_list = []


def goType( cinpType ):
  global include_list

  if cinpType == 'DateTime':
    include_list.append( '"time"' )
    return 'time.Time'

  elif cinpType == 'Map':
    return 'map[string]interface{}'

  else:
    return 'string'


def goEmptyVal( cinpType ):
  if cinpType == 'DateTime':
    return '0'

  elif cinpType == 'Map':
    return 'nil'

  else:
    return '""'


def goNewVal( cinpType ):
  if cinpType == 'DateTime':
    return '0'

  elif cinpType == 'Map':
    return 'map[string]interface{}{}'

  else:
    return '""'


env = Environment()
env.filters[ 'goname' ] = goName
env.filters[ 'gotype' ] = goType
env.filters[ 'goemptyval' ] = goEmptyVal
env.filters[ 'gonewval' ] = goNewVal
env.filters[ 'capitalize' ] = lambda x: x[0].upper() + x[1:]
service_template = env.from_string( """//Package {{service}} - Automatically generated by cinp-codegen from {{url}} at {{timestamp}}
package {{service}}

import (
	"fmt"

	cinp "github.com/cinp/go"
)

// {{service|title}} from {{url}}
type {{service|title}} struct {
	cinp *cinp.CInP
}

// New{{service|title}} creates and returns a new {{service|title}}
func New{{service|title}}(host string, proxy string) (*{{service|title}}, error) {
	var err error
	s := {{service|title}}{}
	s.cinp, err = cinp.NewCInP(host, "{{root_path}}", proxy)
	if err != nil {
		return nil, err
	}
{% for prefix in prefix_list %}
	register{{prefix}}(s.cinp){% endfor %}

  r, _, err := s.cinp.Describe("{{root_path}}")
	if err != nil {
		return nil, err
	}

	if r.APIVersion != "{{api_version}}" {
		return nil, fmt.Errorf("API version mismatch.  Got '%s', expected '{{api_version}}'", r.APIVersion)
	}

	return &s, nil
}

// SetAuth setts the authencation id and token
func (s *{{service|title}}) SetAuth(authID string, authToken string) {
	s.cinp.SetAuth(authID, authToken)
}

// ExtractIds extract the id(s) from a list of URI
func (s *{{service|title}}) ExtractIds(uriList []string) ([]string, error) {
	return s.cinp.ExtractIds(uriList)
}
""" )  # noqa

ns_template = env.from_string( """/*Package {{service}} - Automatically generated by cinp-codegen from {{url}} at {{timestamp}}{% if doc %}
{{doc}}
{% endif %}
 */
package {{service}}

import ({% for item in include_list %}
	{{item}}{% endfor %}
)
""" )  # noqa

model_template = env.from_string( """{% set model_name = prefix|title + name %}

//{{model_name}} - Model {{name}}({{url}})
/*
{{doc}}
 */
type {{model_name}} struct {
	cinp.BaseObject
  cinp *cinp.CInP{% for field in field_list %}
	{{field.name|goname}} {{field.type|gotype}} `json:"{{field.name}}"` // {{field.type}}{% endfor %}
}

// AsMap returns a map[string]interface{} that is required for create and update
func (object *{{model_name}}) AsMap() *map[string]interface{} {
	return &map[string]interface{}{ {% for field in field_list %}
	"{{field.name}}": object.{{field.name|goname}},{% endfor %}
	}
}

// {{model_name}}New - Make a new object of Model {{name}}
func (service *{{service|title}}) {{model_name}}New() *{{model_name}} {
	return &{{model_name}}{cinp: service.cinp}
}

// {{model_name}}NewWithID - Make a new object of Model {{name}}
func (service *{{service|title}}) {{model_name}}NewWithID(id string) *{{model_name}} {
	result := {{model_name}}{cinp: service.cinp}
	result.SetID("{{url}}:"+id+":")
	return &result
}

// {{model_name}}Get - Get function for Model {{name}}
func (service *{{service|title}}) {{model_name}}Get(id string) (*{{model_name}}, error) {
	//object := {{model_name}}{cinp: service.cinp}

	object, err := service.cinp.Get("{{url}}:"+id+":")
	if err != nil {
		return nil, err
	}
	result := (*object).(*{{model_name}})
	result.cinp = service.cinp

	return result, nil
}

// Create - Create function for Model {{name}}
func (object *{{model_name}}) Create() error {
	if err := object.cinp.Create("{{url}}", object); err != nil {
		return err
	}

	return nil
}

// Update - Update function for Model {{name}}
func (object *{{model_name}}) Update(fieldList []string) error {
	if err := object.cinp.Update(object, fieldList); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model {{name}}
func (object *{{model_name}}) Delete() error {
	if err := object.cinp.Delete(object); err != nil {
		return err
	}

	return nil
}

// {{model_name}}List - List function for Model {{name}}
func (service *{{service|title}}) {{model_name}}List(filterName string, filterValues map[string]interface{}) <-chan *{{model_name}} {
	in := service.cinp.ListObjects("{{url}}", reflect.TypeOf({{model_name}}{}), filterName, filterValues, 50)
	out := make(chan *{{model_name}})
	go func() {
		defer close(out)
		object, ok := (<-in).(*{{model_name}})
		if ok {
			out <- object
		}
	}()
	return out
}
{% for action in action_list %}{% if action.static %}{% set funcname = model_name + "Call" + action.name|capitalize %}{% else %}{% set funcname = "Call" + action.name|capitalize %}{% endif %}
// {{funcname}} calls {{action.name}}{% if action.doc %}
/*
{{ action.doc }}
 */{% endif %}{% set parm_list = [] %}{% for parm in action.paramater_list %}{{ parm_list.append( parm.name + " " + parm.type|gotype ) }}{% endfor %}
func ({% if action.static %}service *{{service|title}}{% else %}object *{{model_name}}{% endif %}) {{funcname}}({{parm_list|join(", ")}}) ({% if action.return_type %}{{action.return_type.type|gotype}}, {% endif %}error) {
	args := map[string]interface{}{ {% for parm in action.paramater_list %}
		"{{parm.name}}": {{parm.name}},
{% endfor %}}{% if action.static %}
	uri := "{{action.url}}"{% else %}
	_, _, _, ids, _, err := object.cinp.Split(object.GetID())
	if err != nil {
		return {{action.return_type.type|goemptyval}}, err
	}
	uri, err := object.cinp.UpdateIDs("{{action.url}}", ids)
	if err != nil {
		return {{action.return_type.type|goemptyval}}, err
	}{% endif %}

	result := {{action.return_type.type|gonewval}}

	if err := {% if action.static %}service{% else %}object{% endif %}.cinp.Call(uri, &args, &result); err != nil {
		return {{action.return_type.type|goemptyval}}, err
	}

	return result, nil
}
{% endfor %}
""")  # noqa

register_template = env.from_string( """
func register{{prefix}}(cinp *cinp.CInP) { {% for model in model_list %}
	cinp.RegisterType("{{model.url}}", reflect.TypeOf((*{{prefix|title + model.name}})(nil)).Elem()){% endfor %}
}
""" )  # noqa
  # noqa


def service( wrk_dir, header_map ):
  open( os.path.join( wrk_dir, 'serivce.go' ), 'w' ).write( service_template.render( prefix_list=prefix_list, **header_map ) )


def do_namespace( wrk_dir, header_map, prefix, namespace ):
  global include_list, prefix_list

  if prefix:
    filename = 'ns_{0}{1}.go'.format( prefix, namespace[ 'name' ] )  # TODO: make sure this is filesystem safe
    prefix = '{0}{1}'.format( prefix, namespace[ 'name' ] )
  else:
    filename = 'ns_{0}.go'.format( namespace[ 'name' ] )  # TODO: make sure this is filesystem safe
    prefix = namespace[ 'name' ]

  include_list = []

  if namespace[ 'model_list' ]:
    include_list.append( '"reflect"' )
    include_list.append( 'cinp "github.com/cinp/go"' )

  value_map = {
                'service': header_map[ 'service' ],
                'timestamp': header_map[ 'timestamp' ],
                'name': namespace[ 'name' ],
                'url': namespace[ 'url' ],
                'doc': namespace[ 'doc' ],
                'api_version': namespace[ 'api_version' ]
              }

  with open( os.path.join( wrk_dir, filename ), 'w' ) as fp:
    model_buff = ''

    for model in namespace[ 'model_list' ]:
      model_buff += render_model( header_map[ 'service' ], prefix, model )

    fp.write( ns_template.render( include_list=set( sorted( include_list ) ), **value_map ) )
    fp.write( model_buff )

    if namespace[ 'model_list' ]:
      fp.write( register_template.render( model_list=namespace[ 'model_list' ], prefix=prefix ) )
      prefix_list.append( prefix )

  for child in namespace[ 'namespace_list' ]:
    do_namespace( wrk_dir, header_map, prefix, child )


def render_model( service, prefix, model ):
  value_map = {
                'service': service,
                'prefix': prefix,
                'name': model[ 'name' ],
                'url': model[ 'url' ],
                'doc': model[ 'doc' ],
                'field_list': model[ 'field_list' ],
                'action_list': model[ 'action_list' ]
              }

  return model_template.render( **value_map )


def go_render_func( wrk_dir, header_map, root ):
  header_map[ 'api_version' ] = root[ 'api_version' ]
  root[ 'name' ] = ''

  do_namespace( wrk_dir, header_map, '', root )
  service( wrk_dir, header_map )
