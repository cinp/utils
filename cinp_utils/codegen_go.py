import os
from jinja2 import Environment

all_upper = ( 'ip', 'id', 'uuid', 'ttl', 'url' )


def goname( word ):
  return ''.join( x.upper() if x in all_upper else x.capitalize() for x in word.split( '_' ) )


env = Environment()
env.filters[ 'goname' ] = goname
service_template = env.from_string( """// Automatically generated by cinp-codegen from {{url}} at {{timestamp}}

package {{service}}

import (
	"fmt"

	cinp "github.com/cinp/go"
)

// {{service|title}} from {{url}}
type {{service|title}} struct {
	cinp *cinp.CInP
}

// New{{service|title}} creates and returns a new {{service|title}}
func New{{service|title}}(host string, proxy string) (*{{service|title}}, error) {
	var err error
	s := {{service|title}}{}
	s.cinp, err = cinp.NewCInP(host, "{{root_path}}", proxy)
	if err != nil {
		return nil, err
	}

  r, _, err := s.cinp.Describe("{{root_path}}")
	if err != nil {
		return nil, err
	}

	if r.APIVersion != "{{api_version}}" {
		return nil, fmt.Errorf("API version mismatch.  Got '%s', expected '{{api_version}}'", r.APIVersion)
	}

	return &s, nil
}

// SetAuth setts the authencation id and token
func (s *{{service|title}}) SetAuth(authID string, authToken string) {
	s.cinp.SetAuth(authID, authToken)
}
""" )  # noqa

ns_template = env.from_string( """// Automatically generated by cinp-codegen from {{url}} at {{timestamp}}

package {{service}}

{% if has_models %}import (
	"fmt"
	"strings"
){% endif %}

/*
{{doc}}
 */
""" )  # noqa

model_template = env.from_string( """{% set model_name = prefix|title + name %}

//{{model_name}} - Model {{name}}({{url}})
/*
{{doc}}
 */
type {{model_name}} struct { {% for field in field_list %}
	{{field.name|goname}} string `json:"{{field.name}}"` // {{field.type}}{% endfor %}
	service *{{service|title}}
	id string
}

// Marshalable returns something to marshal from
func (object *{{model_name}}) Marshalable() interface{} {
	return object
}

// Decodable returns something to decode into
func (object *{{model_name}}) Decodable() interface{} {
	return object
}

// returns a map[string]interface{} that is required for create and update
func (object *{{model_name}}) asMap() map[string]interface{} {
	return map[string]interface{}{ {% for field in field_list %}
	"{{field.name}}": object.{{field.name|goname}},{% endfor %}
	}
}

// {{model_name}}New - Make a new object of Model {{name}}
func (service *{{service|title}}){{model_name}}New() (*{{model_name}}, error) {
	return &{{model_name}}{}, nil
}

// {{model_name}}Get - Get function for Model {{name}}
func (service *{{service|title}}){{model_name}}Get(id string) (*{{model_name}}, error) {
	object := {{model_name}}{}
	object.id = "{{url}}:"+id+":"
	object.service = service

	if err := object.service.cinp.Get(object.id, &object); err != nil {
		return nil, err
	}

	return &object, nil
}

// {{model_name}}GetMulti - Get Multi function for Model {{name}}
func (service *{{service|title}}){{model_name}}GetMulti(ids []string) (*map[string]{{model_name}}, error) {
	objects := map[string]{{model_name}}{}
	if err := service.cinp.GetMulti("{{url}}:" + strings.Join(ids, ":") + ":", objects); err != nil {
		return nil, err
	}

	return &objects, nil
}

// Create - Create function for Model {{name}}
func (object *{{model_name}}) Create(service *{{service|title}}) error {
	uri, err := object.service.cinp.Create("{{url}}", object.asMap(), object)
	if err != nil {
		return err
	}

	_, _, _, ids, _, err := object.service.cinp.Split(uri)
	if err != nil {
		return err
	}
	if ids != nil && len(ids) != 1 {
		return fmt.Errorf("Create did not create any/one object")
	}

	object.id = ids[0]

	return nil
}

// Update - Update function for Model {{name}}
func (object *{{model_name}}) Update() error {
	if err := object.service.cinp.Update("{{uri}}:"+object.id+":", object.asMap(), object); err != nil {
		return err
	}

	return nil
}

// Delete - Delete function for Model {{name}}
func (object *{{model_name}}) Delete() error {
	if err := object.service.cinp.Delete("{{uri}}:"+object.id+":"); err != nil {
		return err
	}

	return nil
}

// {{model_name}}List - List function for Model {{name}}
func (service *{{service|title}}){{model_name}}List(filterName string, filterValues map[string]interface{}) <-chan *{{model_name}} {
	return service.cinp.ListObjects("{{url}}", filterName, filterValues, 50)
}

/*
{{action_list}}
 */
""")  # noqa
  # noqa


def service( wrk_dir, header_map ):
  open( os.path.join( wrk_dir, 'serivce.go' ), 'w' ).write( service_template.render( **header_map ) )


def do_namespace( wrk_dir, header_map, prefix, namespace ):
  if prefix:
    filename = 'ns_{0}{1}.go'.format( prefix, namespace[ 'name' ] )  # TODO: make sure this is filesystem safe
    prefix = '{0}{1}'.format( prefix, namespace[ 'name' ] )
  else:
    filename = 'ns_{0}.go'.format( namespace[ 'name' ] )  # TODO: make sure this is filesystem safe
    prefix = namespace[ 'name' ]

  value_map = {
                'service': header_map[ 'service' ],
                'name': namespace[ 'name' ],
                'url': namespace[ 'url' ],
                'doc': namespace[ 'doc' ],
                'api_version': namespace[ 'api_version' ],
                'has_models': bool( namespace[ 'model_list' ] )
              }

  with open( os.path.join( wrk_dir, filename ), 'w' ) as fp:
    fp.write( ns_template.render( **value_map ) )
    for model in namespace[ 'model_list' ]:
      fp.write( render_model( header_map[ 'service' ], prefix, model ) )

  for child in namespace[ 'namespace_list' ]:
    do_namespace( wrk_dir, header_map, prefix, child )


def render_model( service, prefix, model ):
  value_map = {
                'service': service,
                'prefix': prefix,
                'name': model[ 'name' ],
                'url': model[ 'url' ],
                'doc': model[ 'doc' ],
                'field_list': model[ 'field_list' ],
                'action_list': model[ 'action_list' ]
              }

  return model_template.render( **value_map )


def go_render_func( wrk_dir, header_map, root ):
  header_map[ 'api_version' ] = root[ 'api_version' ]

  service( wrk_dir, header_map )
  do_namespace( wrk_dir, header_map, '', root )
