import os
from jinja2 import Environment


def titleize( word, char='=' ):
  return char * len( word )


def table( data_list, header_list ):
  col_count = len( header_list )
  col_width_list = [ len( i ) for i in header_list ]
  if data_list:
    for x in range( 0, col_count ):
      col_width_list[x] = max( col_width_list[x], *[ len( i[x] ) for i in data_list ] )

  result = ''
  result += '+-' + '-+-'.join( [ '-' * i for i in col_width_list ] ) + '-+\n'
  result += '| ' + ' | '.join( [ header_list[i] + ( ' ' * ( col_width_list[i] - len( header_list[i] ) ) ) for i in range( 0, col_count ) ] ) + ' |\n'
  result += '+=' + '=+='.join( [ '=' * i for i in col_width_list ] ) + '=+\n'
  if data_list:
    for data in data_list:
      result += '| ' + ' | '.join( [ data[i] + ( ' ' * ( col_width_list[i] - len( data[i] ) ) ) for i in range( 0, col_count ) ] ) + ' |\n'
      result += '+-' + '-+-'.join( [ '-' * i for i in col_width_list ] ) + '-+\n'

  else:
    result += '+-' + '-+-'.join( [ '-' * i for i in col_width_list ] ) + '-+\n'

  return result + '\n'


def parm_extract( parm_list ):
  return [ ( parm[ 'name' ], parm[ 'type' ], str( parm.get( 'length', '' ) ), '*' if parm.get( 'is_array', False ) else ' ', str( parm.get( 'choice_list', '' ) ), str( parm.get( 'allowed_scheme_list', '' ) ), parm.get( 'uri', '' ), parm.get( 'doc', '' ) ) for parm in parm_list ]


def field_extract( field_list ):
  return [ ( field[ 'name' ], field[ 'type' ], str( field.get( 'length', '' ) ), '' if field.get( 'default', '' ) is None else str( field.get( 'default', '' ) ), '*' if field.get( 'is_array', False ) else ' ', str( field.get( 'choice_list', '' ) ), str( field.get( 'allowed_scheme_list', '' ) ), field.get( 'uri', '' ), field.get( 'doc', '' ) ) for field in field_list ]


env = Environment()
env.filters[ 'titleize' ] = titleize
env.filters[ 'table' ] = table
env.filters[ 'parm_extract' ] = parm_extract
env.filters[ 'field_extract' ] = field_extract

header_template = env.from_string( """==========================={{ service|titleize }}
CInP API Documentation for {{ service }}
==========================={{ service|titleize }}

Automatically generated by cinp-codegen from {{ url }} at {{ timestamp }} for api version *{{ api_version }}*


""" )

ns_template = env.from_string( """Namespace - {{ name }}
============{{ name|titleize }}

URL: *{{ url }}*

API Version: *{{ api_version }}*
{% if doc %}
::

  {{ doc }}
{% endif %}

""" )

model_template = env.from_string( """Model - {{ name }}
--------{{ name|titleize( '-' ) }}

URL: *{{ url }}*
{% if id_field_name %}
Id Field: *{{id_field_name}}*{% endif %}
{% if not_allowed_verb_list %}
Not Allowed Verbs: *{% for item in not_allowed_verb_list %}{{ item }}{% if not loop.last %}, {% endif %}{% endfor %}*
{% endif %}{% if doc %}
::

  {{ doc }}
{% endif %}{% if constant_list %}
Constants
~~~~~~~~~ {% for item in constant_list %}
 - {{ item }}{% endfor %}
{% endif %}{% if list_filter_map %}
List Filters
~~~~~~~~~~~~
{% for key, item in list_filter_map.items() %}
{{ key }}
{{ key|titleize( '^' ) }}
{% if item %}{{ item|parm_extract|table( [ 'Name', 'Type', 'Length', 'Array', 'Choice List', 'Schema List', 'Model', 'Doc' ] ) }}{% endif %}{% endfor %}
{% endif %}{% if field_list %}
Fields
~~~~~~
{{ field_list|field_extract|table( [ 'Name', 'Type', 'Length', 'Default', 'Array', 'Choice List', 'Schema List', 'Model', 'Doc' ] ) }}
{% endif %}
""" )

action_template = env.from_string( """Action - {{ name }}
~~~~~~~~~{{ name|titleize( '~' ) }}

URL: *{{ url }}*

Static: *{% if static %}Yes{% else %}No{% endif %}
{% if doc %}
::

  {{ doc }}
{% endif %}

{{ return_type }}

{% if paramater_list %}
Paramater
~~~~~~~~~
{{ paramater_list|parm_extract|table( [ 'Name', 'Type', 'Length', 'Array', 'Choice List', 'Schema List', 'Model', 'Doc' ] ) }}
{% endif %}
""" )


def write_model( fp, model ):
  value_map = {
                'name': model[ 'name' ],
                'url': model[ 'url' ],
                'doc': model.get( 'doc', '' ).strip().replace( '\n', '\n  ' ),
                'constant_list': model.get( 'constant_list', [] ),
                'list_filter_map': model.get( 'list_filter_map', [] ),
                'field_list': model[ 'field_list' ],
                'not_allowed_verb_list': model.get( 'not_allowed_verb_list', [] ),
                'id_field_name': model.get( 'id_field_name', '' ),
              }

  fp.write( model_template.render( **value_map ) )
  for action in model.get( 'action_list', [] ):
    value_map = {
                  'name': action[ 'name' ],
                  'static': action[ 'static' ],
                  'doc': action.get( 'doc', '' ).strip().replace( '\n', '\n  ' ),
                  'return_type': action.get( 'return_type', {} ),
                  'paramater_list': action.get( 'paramater_list', [] )
                }
    fp.write( action_template.render( **value_map ) )



def write_namespace( fp, namespace ):
  value_map = {
                'name': namespace[ 'name' ],
                'url': namespace[ 'url' ],
                'doc': namespace.get( 'doc', '' ).strip().replace( '\n', '\n  ' ),
                'api_version': namespace[ 'api_version' ]
              }
  fp.write( ns_template.render( **value_map ) )

  for model in namespace[ 'model_list' ]:
    write_model( fp, model )

  for child in namespace[ 'namespace_list' ]:
    write_namespace( fp, child )


def rst_render_func( wrk_dir, header_map, root ):
  header_map[ 'api_version' ] = root[ 'api_version' ]

  root[ 'name' ] = '(root)'

  with open( os.path.join( wrk_dir, 'api.rst' ), 'w' ) as fp:
    fp.write( header_template.render( **header_map ) )
    write_namespace( fp, root )
