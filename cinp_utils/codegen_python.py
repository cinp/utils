from jinja2 import Environment

env = Environment()
model_template = env.from_string( """


  # Model {{name}}({{url}})
  class {{name}}:
   \"\"\"
  {{doc}}
   \"\"\"
   def __init__( self, id{% for field in fields %}, {{ field.name }}{% endfor %} ):
     self.__id = id
{% for field in fields %}      self.{{ field.name }} = {{ field.name }}
{% endfor %}

    @classmethod
    def list( cls, filter, filter_values ):
{% if not fitlers %}
      asdf
{% else %}
      if filter not in ( {% for filter in self.filters %}, '{{ filter.name }}'{% endfor %} ):
        raise ValueError( 'Invalid filter "{0}"'.format( filter ) )

{% endif %}

    @classmethod
    def get( cls, id ):
      data = cinp.get( '{{url}}:{id}:'.format( id ) )

      return cls( id{% for field in fields %}, data[ '{{ field.name }}' ]{% endfor %} )

    @classmethod
    def create( cls{% for field in fields %}, {{ field.name }}{% endfor %} ):
      data = cinp.create( {% for field in fields %}, {{ field.name }}{% endfor %} )
      return cls( id{% for field in fields %}, data[ '{{ field.name }}' ]{% endfor %} )

    def update( self{% for field in fields %}, {{ field.name }}=None{% endfor %} ):
      cinp.update('{{url}}:{id}:'.format( id ) )

    def delete( self ):
      pass

{% for action in actions %}
    def {{ action.name }}( self{% for paramater in action.paramaters %}, {{ paramater.name }}{% endfor %} ):
{% if action.static %}
      return ---cinp.call( {{ action.url }}{% for paramater in action.paramaters %}, {{ paramater.name }}{% endfor %} )
{% else %}
      return cinp.call( {{ action.url }}{% for paramater in action.paramaters %}, {{ paramater.name }}{% endfor %} )
{% endif %}
{% endfor %}
""")


# TODO: api-version check
def header( value_map ):
  return """# Automatically generated by cinp-codegen from {url} at {timestamp}

from cinp import client

class {service}( cinp.CInP ):
  def __init__( self, host, proxy=None ):
    super().__init__( host, '{root_path}', proxy )

""".format( **value_map )


def namespace( value_map ):
  return """
  # Namespace {name}({url})
""".format( **value_map )


def model( value_map ):
  return model_template.render( **value_map )


def python_render_func( dir, header_map, root ):
  pass
